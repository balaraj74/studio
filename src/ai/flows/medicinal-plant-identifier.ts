
'use server';

/**
 * @fileOverview Identifies a medicinal plant from an image and provides detailed information about its uses.
 * 
 * - identifyMedicinalPlant - A function that handles the plant identification process.
 * - IdentifyMedicinalPlantInput - The input type for the identifyMedicinalPlant function.
 * - IdentifyMedicinalPlantOutput - The return type for the identifyMedicinalPlant function.
 */

import { ai } from '@/ai/genkit';
import { z } from 'zod';
import { googleAI } from '@genkit-ai/googleai';

const IdentifyMedicinalPlantInputSchema = z.object({
  imageUri: z.string().describe("A photo of a plant, as a data URI. Format: 'data:<mimetype>;base64,<encoded_data>'."),
});
export type IdentifyMedicinalPlantInput = z.infer<typeof IdentifyMedicinalPlantInputSchema>;

const IdentifyMedicinalPlantOutputSchema = z.object({
  isMedicinal: z.boolean().describe("Confirms if the identified plant is a known medicinal plant in India."),
  commonName: z.string().describe("The common name of the identified plant. 'Unknown' if not identifiable."),
  botanicalName: z.string().describe("The botanical (scientific) name of the plant."),
  medicinalUses: z.string().describe("A detailed summary of the plant's medicinal uses."),
  partsUsed: z.string().describe("The parts of the plant that are used for medicinal purposes (e.g., leaves, root, stem)."),
  preparationMethods: z.string().describe("Common methods for preparing the plant for medicinal use (e.g., tea, powder, extract)."),
  precautions: z.string().describe("A detailed list of specific precautions, potential side effects, contraindications, or dosage warnings associated with the plant's use. Be very specific. If there are no known major precautions, return only the word 'None'."),
  regionalNames: z.string().describe("A list of regional names for the plant (e.g., in Hindi, Kannada, Tamil)."),
});
export type IdentifyMedicinalPlantOutput = z.infer<typeof IdentifyMedicinalPlantOutputSchema>;

export async function identifyMedicinalPlant(input: IdentifyMedicinalPlantInput): Promise<IdentifyMedicinalPlantOutput> {
  return identifyMedicinalPlantFlow(input);
}

const prompt = ai.definePrompt({
  name: 'identifyMedicinalPlantPrompt',
  input: { schema: IdentifyMedicinalPlantInputSchema },
  output: { schema: IdentifyMedicinalPlantOutputSchema },
  prompt: `You are an AI assistant specializing in the identification of Indian medicinal plants. Your task is to analyze the provided plant image and determine if it is a known medicinal plant from the Indian subcontinent.

If you identify a medicinal plant, provide the following details:
- isMedicinal: true
- Common Name
- Botanical Name
- Medicinal Uses: Provide a detailed summary.
- Parts Used: (e.g., leaves, root, stem)
- Preparation Methods: (e.g., tea, powder, extract)
- Precautions or Warnings: Provide a detailed list of specific precautions, potential side effects, contraindications, or dosage warnings. Be very specific. If there are no known major precautions, you must return only the word "None".
- Regional Names: (e.g., Hindi, Kannada, Tamil, Malayalam)

If the image does not contain a recognizable medicinal plant from India or is not a plant at all, set 'isMedicinal' to false and fill the other fields with 'Not Applicable' or similar text.

Analyze this image: {{media url=imageUri}}`,
});

const identifyMedicinalPlantFlow = ai.defineFlow(
  {
    name: 'identifyMedicinalPlantFlow',
    inputSchema: IdentifyMedicinalPlantInputSchema,
    outputSchema: IdentifyMedicinalPlantOutputSchema,
  },
  async (input) => {
    try {
      const { output } = await prompt(input, { model: googleAI.model('gemini-1.5-flash') });
      if (!output) {
        throw new Error("No output was generated by the AI model.");
      }
      return output;
    } catch (error) {
       console.error("Error in identifyMedicinalPlantFlow:", error);
       throw new Error("The AI model could not identify the plant. Please try again with a clearer image.");
    }
  }
);
