
'use server';
/**
 * @fileOverview An AI agent that gets weather information using a tool.
 *
 * - getWeatherInfo - A function that handles the weather query.
 * - GetWeatherInfoInput - The input type for the getWeatherInfo function.
 * - GetWeatherInfoOutput - The return type for the getWeatherInfo function.
 */

import { ai } from '@/ai/genkit';
import { z } from 'genkit';
import fetch from 'node-fetch';

const GetWeatherInfoInputSchema = z.object({
  lat: z.number().describe('The latitude for the location.'),
  lon: z.number().describe('The longitude for the location.'),
});
export type GetWeatherInfoInput = z.infer<typeof GetWeatherInfoInputSchema>;

const DailyForecastSchema = z.object({
    date: z.string().describe("The date for the forecast, e.g., 'Monday'."),
    weatherCode: z.number().describe("The WMO weather code."),
    maxTemp: z.number().describe("The maximum temperature."),
    minTemp: z.number().describe("The minimum temperature."),
});

const GetWeatherInfoOutputSchema = z.object({
  location: z.object({
    name: z.string().describe("The name of the location, e.g., 'Bengaluru, Bangalore Urban'"),
  }),
  current: z.object({
    temperature: z.number(),
    weatherCode: z.number(),
    humidity: z.number(),
    windSpeed: z.number(),
    isDay: z.number(),
  }),
  daily: z.array(DailyForecastSchema).describe("A 5-day forecast."),
  summary: z.string().describe("A short, conversational summary of the overall weather, generated by the AI."),
  sunrise: z.string().describe("Today's sunrise time, e.g., '06:05'"),
  sunset: z.string().describe("Today's sunset time, e.g., '18:45'"),
});
export type GetWeatherInfoOutput = z.infer<typeof GetWeatherInfoOutputSchema>;


export async function getWeatherInfo(input: GetWeatherInfoInput): Promise<GetWeatherInfoOutput> {
  return weatherFlow(input);
}

const weatherTool = ai.defineTool(
  {
    name: 'getCurrentWeather',
    description: 'Get the current weather and a multi-day forecast for a given latitude and longitude.',
    inputSchema: GetWeatherInfoInputSchema,
    // Note: The output schema for the tool itself doesn't include the AI summary.
    outputSchema: GetWeatherInfoOutputSchema.omit({ summary: true }),
  },
  async ({ lat, lon }) => {
    const weatherUrl = `https://api.open-meteo.com/v1/forecast?latitude=${lat}&longitude=${lon}&current=temperature_2m,relative_humidity_2m,weather_code,wind_speed_10m,is_day&daily=weather_code,temperature_2m_max,temperature_2m_min,sunrise,sunset&timezone=auto`;
    const geocodeUrl = `https://nominatim.openstreetmap.org/reverse?format=json&lat=${lat}&lon=${lon}`;

    const [weatherResponse, geocodeResponse] = await Promise.all([
        fetch(weatherUrl),
        fetch(geocodeUrl, { headers: { 'User-Agent': 'AgriSence-App/1.0' }})
    ]);

     if (!weatherResponse.ok) {
        throw new Error(`Failed to fetch weather data. Status: ${weatherResponse.status}`);
    }
     if (!geocodeResponse.ok) {
        // Don't fail the whole thing, just proceed without a location name
        console.error(`Failed to fetch geocoding data. Status: ${geocodeResponse.status}`);
    }

    const weatherData = await weatherResponse.json() as any;
    const geocodeData = geocodeResponse.ok ? await geocodeResponse.json() as any : null;

    let locationName = "Your Location";
    if (geocodeData?.address) {
        const { village, town, city, county, state, state_district } = geocodeData.address;
        const place = village || town || city || "Unknown Place";
        const district = county || state_district || "";
        locationName = [place, district].filter(Boolean).join(', ');
    }

    const dailyForecasts = weatherData.daily.time.slice(0, 5).map((time: string, index: number) => ({
        date: new Date(time).toLocaleDateString('en-US', { weekday: 'long' }),
        weatherCode: weatherData.daily.weather_code[index],
        maxTemp: Math.round(weatherData.daily.temperature_2m_max[index]),
        minTemp: Math.round(weatherData.daily.temperature_2m_min[index]),
    }));
    
    return {
        location: {
            name: locationName
        },
        current: {
            temperature: Math.round(weatherData.current.temperature_2m),
            weatherCode: weatherData.current.weather_code,
            humidity: weatherData.current.relative_humidity_2m,
            windSpeed: Math.round(weatherData.current.wind_speed_10m),
            isDay: weatherData.current.is_day,
        },
        daily: dailyForecasts,
        sunrise: new Date(weatherData.daily.sunrise[0]).toLocaleTimeString('en-GB', { hour: '2-digit', minute: '2-digit'}),
        sunset: new Date(weatherData.daily.sunset[0]).toLocaleTimeString('en-GB', { hour: '2-digit', minute: '2-digit'}),
    };
  }
);

const weatherPrompt = ai.definePrompt({
    name: 'summarizeWeather',
    input: { schema: GetWeatherInfoOutputSchema.omit({ summary: true }) },
    output: { schema: z.object({ summary: GetWeatherInfoOutputSchema.shape.summary })},
    prompt: `You are a helpful weather assistant. Given the following weather data in JSON format, provide a short, conversational summary of the overall weather. For example "Looks like a clear day, but expect some rain showers later in the week."

    Data:
    {{{json this}}}
    `,
});

const weatherFlow = ai.defineFlow(
  {
    name: 'weatherFlow',
    inputSchema: GetWeatherInfoInputSchema,
    outputSchema: GetWeatherInfoOutputSchema,
  },
  async (input) => {
    try {
      // 1. Call the tool to get structured weather data.
      const structuredData = await weatherTool(input);

      let summary = 'Enjoy the weather!';
      try {
        // 2. Call the AI to generate a summary from the structured data.
        const { output } = await weatherPrompt(structuredData);
        if (output?.summary) {
          summary = output.summary;
        }
      } catch (error) {
        console.error('Could not generate weather summary from AI:', error);
        // Do not throw; proceed with a default summary.
      }

      // 3. Combine the structured data and the AI's summary.
      return {
        ...structuredData,
        summary,
      };
    } catch (error) {
      console.error("Error in weatherFlow:", error);
      throw new Error("The weather service is currently unavailable. Please try again in a few moments.");
    }
  }
);
